cmake_minimum_required(VERSION 2.8.8)
project(ifc_mesh_extract)

set (ifc_mesh_extract_VERSION_MAJOR 0)
set (ifc_mesh_extract_VERSION_MINOR 1)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/include")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

if(CMAKE_COMPILER_IS_GNUCXX)
    if (NOT WIN32)
        add_definitions(-fPIC)
    endif()
	add_definitions(-O3)
	add_definitions(-g)
	add_definitions(-std=c++14)
    add_definitions(-Wall)
    add_definitions(-Wno-unused-function)
    add_definitions(-Wno-unused-local-typedefs)
    add_definitions(-Wno-maybe-uninitialized)
    add_definitions(-Wno-deprecated-declarations)
    add_definitions(-DM_LOG2E=1.44269504088896340736)
    add_definitions(-DBOOST_OPTIONAL_USE_OLD_DEFINITION_OF_NONE)
endif()

find_package(Eigen)
find_package(OpenMesh)
find_package(IfcOpenShell)
find_package(OpenCascade)
find_package(Cartan)
find_package(Boost COMPONENTS date_time iostreams serialization system filesystem regex thread program_options)

file (GLOB_RECURSE obj RELATIVE "${PROJECT_SOURCE_DIR}" "src/*.cpp")
if (EIGEN_FOUND AND Boost_FOUND AND OPENMESH_FOUND AND OPENCASCADE_FOUND AND IFCOPENSHELL_FOUND AND CARTAN_FOUND)
	include_directories(${OPENMESH_INCLUDE_DIRS})
	include_directories(${OPENCASCADE_INCLUDE_DIRS})
	include_directories(${IFCOPENSHELL_INCLUDE_DIRS})
	include_directories(${EIGEN_INCLUDE_DIRS})
	include_directories(${BOOST_INCLUDE_DIRS})
	include_directories(${CARTAN_INCLUDE_DIRS})
	link_directories(${OPENCASCADE_LIBRARY_DIRS})

    add_library(ifc_mesh_extract SHARED ${obj})
    target_link_libraries(ifc_mesh_extract ${OPENMESH_LIBRARIES} ${IFCOPENSHELL_LIBRARIES} ${OPENCASCADE_LIBRARIES} ${Boost_LIBRARIES} ${CARTAN_LIBRARIES} "dl")

    add_executable(ifc_extract_meshes "apps/ifc_extract_meshes.cpp")
    target_link_libraries(ifc_extract_meshes ${OPENMESH_LIBRARIES} ${Boost_LIBRARIES} ifc_mesh_extract)

    if (WIN32)
        install (FILES "${PROJECT_BINARY_DIR}/libifc_mesh_extract.dll.a" DESTINATION lib)
        install (FILES "${PROJECT_BINARY_DIR}/libifc_mesh_extract.dll" DESTINATION bin)
        install (FILES "${PROJECT_BINARY_DIR}/ifc_extract_meshes.exe" DESTINATION bin)
    else()
        install (TARGETS ifc_mesh_extract DESTINATION lib)
        install (TARGETS ifc_extract_meshes DESTINATION bin)
    endif()
    install (DIRECTORY include/ DESTINATION include/ifc_mesh_extract)

    file (GLOB find_modules RELATIVE "${PROJECT_SOURCE_DIR}" "cmake/modules/self/*.cmake")
    install (FILES ${find_modules} DESTINATION share/IFCMeshExtract)
endif()
